from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPool2D, Activation, Dropout, Flatten, Dense
from tensorflow.keras import Model


class VGG16(Model):
    def __init__(self):
        super(VGG16, self).__init__()
        self.c1 = Conv2D(filters=64, kernel_size=(3, 3), padding='same')
        self.b1 = BatchNormalization()
        self.a1 = Activation('relu')
        self.c2 = Conv2D(filters=64, kernel_size=(3, 3), padding='same')
        self.b2 = BatchNormalization()
        self.a2 = Activation('relu')
        self.p1 = MaxPool2D(pool_size=(2, 2), strides=2, padding='same')
        self.d1 = Dropout(0.2)

        self.c3 = Conv2D(filters=128, kernel_size=(3, 3), padding='same')
        self.b3 = BatchNormalization()
        self.a3 = Activation('relu')
        self.c4 = Conv2D(filters=128, kernel_size=(3, 3), padding='same')
        self.b4 = BatchNormalization()
        self.a4 = Activation('relu')
        self.p2 = MaxPool2D(pool_size=(2, 2), strides=2, padding='same')
        self.d2 = Dropout(0.2)

        self.c5 = Conv2D(filters=256, kernel_size=(3, 3), padding='same')
        self.b5 = BatchNormalization()
        self.a5 = Activation('relu')
        self.c6 = Conv2D(filters=256, kernel_size=(3, 3), padding='same')
        self.b6 = BatchNormalization()
        self.a6 = Activation('relu')
        self.c7 = Conv2D(filters=256, kernel_size=(3, 3), padding='same')
        self.b7 = BatchNormalization()
        self.a7 = Activation('relu')
        self.p3 = MaxPool2D(pool_size=(2, 2), strides=2, padding='same')
        self.d3 = Dropout(0.2)

        self.c8 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b8 = BatchNormalization()
        self.a8 = Activation('relu')
        self.c9 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b9 = BatchNormalization()
        self.a9 = Activation('relu')
        self.c10 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b10 = BatchNormalization()
        self.a10 = Activation('relu')
        self.p4 = MaxPool2D(pool_size=(2, 2), strides=2, padding='same')
        self.d4 = Dropout(0.2)

        self.c11 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b11 = BatchNormalization()
        self.a11 = Activation('relu')
        self.c12 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b12 = BatchNormalization()
        self.a12 = Activation('relu')
        self.c13 = Conv2D(filters=512, kernel_size=(3, 3), padding='same')
        self.b13 = BatchNormalization()
        self.a13 = Activation('relu')
        self.p5 = MaxPool2D(pool_size=(2, 2), strides=2, padding='same')
        self.d5 = Dropout(0.2)

        self.flatten = Flatten()
        self.f1 = Dense(512, activation='relu')
        self.d6 = Dropout(0,2)
        self.f2 = Dense(512, activation='relu')
        self.d7 = Dropout(0.2)
        self.f3 = Dense(10, activation='softmax')

    def call(self, inputs, training=None, mask=None):
        inputs = self.c1(inputs)
        inputs = self.b1(inputs)
        inputs = self.a1(inputs)
        inputs = self.c2(inputs)
        inputs = self.b2(inputs)
        inputs = self.a2(inputs)
        inputs = self.p1(inputs)
        inputs = self.d1(inputs)

        inputs = self.c3(inputs)
        inputs = self.b3(inputs)
        inputs = self.a3(inputs)
        inputs = self.c4(inputs)
        inputs = self.b4(inputs)
        inputs = self.a4(inputs)
        inputs = self.p2(inputs)
        inputs = self.d2(inputs)

        inputs = self.c5(inputs)
        inputs = self.b5(inputs)
        inputs = self.a5(inputs)
        inputs = self.c6(inputs)
        inputs = self.b6(inputs)
        inputs = self.a6(inputs)
        inputs = self.c7(inputs)
        inputs = self.b7(inputs)
        inputs = self.a7(inputs)
        inputs = self.p3(inputs)
        inputs = self.d3(inputs)

        inputs = self.c8(inputs)
        inputs = self.b8(inputs)
        inputs = self.a8(inputs)
        inputs = self.c9(inputs)
        inputs = self.b9(inputs)
        inputs = self.a9(inputs)
        inputs = self.c10(inputs)
        inputs = self.b10(inputs)
        inputs = self.a10(inputs)
        inputs = self.p4(inputs)
        inputs = self.d4(inputs)

        inputs = self.c11(inputs)
        inputs = self.b11(inputs)
        inputs = self.a11(inputs)
        inputs = self.c12(inputs)
        inputs = self.b12(inputs)
        inputs = self.a12(inputs)
        inputs = self.c13(inputs)
        inputs = self.b13(inputs)
        inputs = self.a13(inputs)
        inputs = self.p5(inputs)
        inputs = self.d5(inputs)

        inputs = self.flatten(inputs)
        inputs = self.f1(inputs)
        inputs = self.d6(inputs)
        inputs = self.f2(inputs)
        inputs = self.d7(inputs)
        y = self.f3(inputs)
        return y
